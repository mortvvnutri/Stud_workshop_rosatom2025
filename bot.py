from config import TICKERS
from utils import get_token
from analysis import analyze_stock
from ml_forecast import predict_stock_price
from chart import send_stock_chart
from trend_classifier import classify_trend
import telebot
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot(get_token())

@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(ticker) for ticker in TICKERS]
    keyboard.add(*buttons)
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text in TICKERS)
def select_ticker(message):
    chat_id = message.chat.id
    selected_ticker = message.text
    bot.send_message(chat_id, f'üìä –¢–∏–∫–µ—Ä {selected_ticker} –≤—ã–±—Ä–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑...')

    try:
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        data = analyze_stock(selected_ticker)
        last_price = float(data["Close"].iloc[-1])
        signal_text = f'üìå –ê–Ω–∞–ª–∏–∑ {selected_ticker}:\n–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {last_price:.2f}\n'
        bot.send_message(chat_id, signal_text)

        # –ü—Ä–æ–≥–Ω–æ–∑
        predicted_price = predict_stock_price(selected_ticker)
        bot.send_message(chat_id, f'üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${predicted_price:.2f}')

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–∞
        trend = classify_trend(selected_ticker)
        bot.send_message(chat_id, f'üìä {trend}')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        send_stock_chart(selected_ticker, chat_id)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        bot.send_message(chat_id, f'–û—à–∏–±–∫–∞: {str(e)}')

if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ polling")
